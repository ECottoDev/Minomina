AWSTemplateFormatVersion: 2010-09-09
Description: >-
  SamApp
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  Region:
    Type: String
    Default: us-east-1  
  FromEmail:
    Type: String
    Default: ecotto@prw.net
  ToEmail:
    Type: String
    Default: ecotto@cloudium.net,ecotto@essnet.com
  BucketName:
    Type: String
    Default: status2.minominapr.com
Resources:
  #SNS Topic definition
  
  sendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'sendEmailFunction'
      CodeUri: backend/
      Handler: src/handlers/send-report.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description:
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref InstanceTable
      - Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:DescribeTable
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EC2StateChangeTopic
      - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: "*"
      - Statement:
            Effect: Allow
            Action:
              - s3:GetObject   # Read
              - s3:PutObject   # Write/Update
              - s3:DeleteObject # Delete
              - s3:ListBucket
            Resource: 
              - !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, '/*']]
      Environment:
        Variables:
          GET_INSTANCES: !Ref updateInfoFunction
          INSTANCE_TABLE: !Ref InstanceTable
          SNS_TOPIC_ARN: !Ref EC2StateChangeTopic
          FROM: !Ref FromEmail
          TO: !Ref ToEmail
          REGION: !Ref Region
          BUCKET:  !Ref BucketName
  
          
  
  dataEvaluationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DataEvaluation'
      CodeUri: backend/
      Handler: src/handlers/data-eval.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description:
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref InstanceTable
      - Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:DescribeTable
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EC2StateChangeTopic
      - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: "*"
      - Statement:
            Effect: Allow
            Action:
              - s3:GetObject   # Read
              - s3:PutObject   # Write/Update
              - s3:DeleteObject # Delete
              - s3:ListBucket
            Resource: 
              - !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, '/*']]
      Environment:
        Variables:
          GET_INSTANCES: !Ref updateInfoFunction
          INSTANCE_TABLE: !Ref InstanceTable
          SNS_TOPIC_ARN: !Ref EC2StateChangeTopic
          FROM: !Ref FromEmail
          TO: !Ref ToEmail
          REGION: !Ref Region
          BUCKET:  !Ref BucketName

  
  EC2StateChangeTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Instance State Change
      TopicName: EC2StateChangeNotifications

  apiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'APIFunction'
      CodeUri: backend/
      Handler: src/handlers/API.apiHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description:
      Policies:
      - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
      Environment:
        Variables:
          REGION: !Ref Region
          DATA_EVAL:  !Ref dataEvaluationFunction
          GET_INSTANCES: !Ref updateInfoFunction
          START_INSTANCES: !Ref startInstanceFunction
          STOP_INSTANCES: !Ref stopInstanceFunction
          REBOOT_INSTANCES: !Ref rebootInstanceFunction
          LOGIN: !Ref LoginFunction
          LOGOUT: !Ref LogoutFunction
          VERIFY: !Ref VerifySessionFunction
          TEST_SES: !Ref sendEmailFunction
          ENDPOINT_OVERRIDE: ''
      FunctionUrlConfig:  # <- Add this block for Function URL
        AuthType: NONE    # Can be AWS_IAM or NONE
        Cors:
          AllowOrigins:
            - "*"         # Allow all origins, or specify domains
          AllowMethods:
            - POST
            - PUT
          AllowHeaders:
            - "*"
          AllowCredentials: false  # Optional

  #Database management
  updateInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'updateInfoFunction'
      CodeUri: backend/
      Handler: src/handlers/updateInfo.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description:
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref InstanceTable
      - Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:DescribeTable
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EC2StateChangeTopic
      Environment:
        Variables:
          INSTANCE_TABLE: !Ref InstanceTable
          SNS_TOPIC_ARN: !Ref EC2StateChangeTopic
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''
          
  # EC2 management
  startInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/start-instance.startInstanceHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref InstanceTable
      - Statement:
            - Effect: Allow
              Action:
                - ec2:StartInstances
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EC2StateChangeTopic
      Environment:
        Variables:
          INSTANCE_TABLE: !Ref InstanceTable
          SNS_TOPIC_ARN: !Ref EC2StateChangeTopic
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''
  
  stopInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/stop-instances.stopInstanceHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref InstanceTable
      - Statement:
            - Effect: Allow
              Action:
                - ec2:StopInstances
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EC2StateChangeTopic
      Environment:
        Variables:
          INSTANCE_TABLE: !Ref InstanceTable
          SNS_TOPIC_ARN: !Ref EC2StateChangeTopic
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''

  rebootInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/reboot-instance.rebootInstanceHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref InstanceTable
      - Statement:
            - Effect: Allow
              Action:
                - ec2:RebootInstances
              Resource: "*"
      - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EC2StateChangeTopic
      Environment:
        Variables:
          INSTANCE_TABLE: !Ref InstanceTable
          SNS_TOPIC_ARN: !Ref EC2StateChangeTopic
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''

  #Session Management
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/login.loginHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UserTable
      - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: "*"
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          LAMBDA_NAME: !Ref SessionInitiatorFunction
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''
  
  LogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/logout.logoutHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UserTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTable
      - Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
            Resource: "*"
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          SESSION_TABLE: !Ref SessionTable
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''
  
  VerifySessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/verify-session.verifySessionHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTable
      - DynamoDBCrudPolicy:
          TableName: !Ref UserTable
      - Statement:
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
              - dynamodb:GetItem
            Resource: "*"
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          SESSION_TABLE: !Ref SessionTable
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''

  SessionInitiatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/session-initiator.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UserTable
      - Statement:
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource: "*"
      Environment:
        Variables:
          SESSION_TABLE: !Ref SessionTable
          REGION: !Ref Region
          ENDPOINT_OVERRIDE: ''
          

  #Dynamo tables
  InstanceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: 'InstanceTable'
      PrimaryKey:
        Name: InstanceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: 'UsersTable'
      PrimaryKey:
        Name: username
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  SessionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: 'SessionsTable'
      PrimaryKey:
        Name: authToken
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  #S3 Bucket
  WebSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'status2.minominapr.com'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForWebSiteBucket
        Statement:
          # Allow CloudFront to access the objects in the bucket
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, '/*']]
          # Allow public access to the objects in the bucket
          - Sid: AllowPublicAccess
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, '/*']]
          # Allow public access to bucket ACLs (if needed)
          - Sid: AllowPublicACLAccess
            Effect: Allow
            Principal: "*"
            Action: s3:PutObjectAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, '/*']]


Outputs:
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket

  S3WebsiteURL:
    Description: URL of the S3 bucket's static website
    Value: !GetAtt WebSiteBucket.WebsiteURL

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
