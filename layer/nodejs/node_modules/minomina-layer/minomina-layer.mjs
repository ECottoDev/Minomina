import { S3Client, GetObjectCommand, PutObjectCommand} from "@aws-sdk/client-s3";
import { SESClient, SendEmailCommand } from "@aws-sdk/client-ses";
import { SQSClient, SendMessageCommand } from "@aws-sdk/client-sqs";

const REGION = process.env.REGION;

const LAMBDA_NAME = process.env.GET_INSTANCES;

const s3 = new S3Client({ region: REGION });
const HISTORY_BUCKET = process.env.BUCKET;

const sesClient = new SESClient({ region: REGION });
const SENDER_EMAIL = process.env.FROM;

const sqs = new SQSClient({ region: REGION });

const retryURL = process.env.SQS

export async function retryFunction(params) {
  await sqs.send(new SendMessageCommand(params));

}

export async function sendEmail({SENDER_EMAIL= null , RECIPIENTS = null, subject = null, body = null}) {
        const params = {
            Source: SENDER_EMAIL,
            Destination: {
            ToAddresses: RECIPIENTS
            },
            Message: {
            Subject: {
              Data: subject
            },
            Body: {
                Html: {
                  Data: body
                }
            }
            }
        }
    
        try {
            const result = await sesClient.send(new SendEmailCommand(params));
            return {
            statusCode: 200,
            body: `Email sent! Message ID: ${result.MessageId}`
            };
        } catch (err) {
            console.error("Error sending email:", err);
            event.Retry = true;
             const retryParams = {
                QueueUrl: retryURL,
                MessageBody: JSON.stringify({
                  source: "Update Function Error",
                  payload: event,
                  reason: `Error Retrieving from EC2: ${err.message}`
                  })
              }
        await retryFunction(retryParams);
            return {
            statusCode: 500,
            body: `Failed to send email: ${err.message}`
            };
        }
}

export async function date() {
    const date = new Date();
    const options = {
      timeZone: 'America/Puerto_Rico', // AST (Atlantic Standard Time)
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    };
    
    const format = new Intl.DateTimeFormat('en-US', options);
    const day = format.format(date)
    return day;	
}

export async function objectExists(bucket, key) {
    try {
      await s3.send(new GetObjectCommand({ Bucket: bucket, Key: key }));
      return true;
    } catch (err) {
      if (err.name === 'NoSuchKey' || err.$metadata?.httpStatusCode === 404) {
        return false;
      }
      event.Retry = true;
      const retryParams = {
        QueueUrl: retryURL,
        MessageBody: JSON.stringify({
          source: "Update Function Error",
          payload: event,
          reason: `Error Retrieving from EC2: ${err.message}`
          })
        }
        await retryFunction(retryParams);
    }
}

export function sortArrayOfObj(property) {
    let sortOrder = 1;
    if (property[0] === '-') {
        sortOrder = -1;
        property = property.substring(1);
    }
    return (a, b) => (a[property] instanceof String ? (a, b) => a[property].localeCompare(b[property], 'es') : ((a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0)) * sortOrder;
}

export function compareArraysOfObj(arr1, arr2, ...props) {
    if (arr1.length !== arr2.length) return false;
    
    return arr1.every((obj1, index) => {
      const obj2 = arr2[index];
      return props.every(prop => obj1[prop] === obj2[prop]);
    });
}

  
export function getDifferingElements(arr1, arr2, ...props) {
    const differingElements = [];
  
    for (let i = 0; i < arr1.length; i++) {
      const obj1 = arr1[i];
      const obj2 = arr2[i];
  
      const isDifferent = props.some(prop => obj1[prop] !== obj2?.[prop]);
  
      if (isDifferent) {
        differingElements.push(obj1);
      }
    }
  
    return differingElements;
}

export async function appendToEC2HistoryLog(bucket, key, instances) {
    let html;
    try {
      html = await getObjectText(bucket, key);
      console.log('✅ Existing HTML found. Appending section...');
    } catch (err) {
      if (err.name === 'NoSuchKey' || err.$metadata?.httpStatusCode === 404) {
        console.warn('📄 Document not found. Creating a new one...');
        html = createNewHtmlDocument();
      } else {
        console.error('❌ Error fetching HTML:', err);
      event.Retry = true;
      const retryParams = {
        QueueUrl: retryURL,
        MessageBody: JSON.stringify({
          source: "Update Function Error",
          payload: event,
          reason: `Error Retrieving from EC2: ${err.message}`
          })
        }
        await retryFunction(retryParams);
      }
    }
    const newRows = buildTableRows(instances);
    const updatedHtml = insertRowsIntoTable(html, newRows);

    const uploadParams = {
      Bucket: bucket,
      Key: key,
      Body: updatedHtml,
      ContentType: 'text/html'
    };
  
    await s3.send(new PutObjectCommand(uploadParams));
    console.log(`📦 Log updated at s3://${bucket}/${key}`);
}

export async function getObjectText(bucket, key) {
    const command = new GetObjectCommand({ Bucket: bucket, Key: key });
    const { Body } = await s3.send(command);
    return streamToString(Body);
}
  
export function streamToString(stream) {
    return new Promise((resolve, reject) => {
      const chunks = [];
      stream.on("data", chunk => chunks.push(chunk));
      stream.on("error", reject);
      stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf-8")));
    });
}
  
export function buildTableRows(instances) {
    return instances.map(instance => `
      <tr>
        <td>${instance.InstanceId}</td>
        <td>${instance.InstanceName}</td>
        <td>${instance.Status}</td>
        <td>${instance.LastChecked}</td>
      </tr>`).join('');
}
  
  
export function insertRowsIntoTable(html, rows) {
    const marker = '</tbody>';
    if (html.includes(marker)) {
      return html.replace(marker, `${rows}\n${marker}`);
    }
    return html; // fallback if something went wrong
}
  
  
export function createNewHtmlDocument() {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>EC2 Instance History</title>
        <style>
          table { border-collapse: collapse; width: 100%; margin-bottom: 30px; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f4f4f4; }
          h3 { font-family: Arial, sans-serif; margin-top: 40px; }
        </style>
      </head>
      <body>
        <h1>EC2 Instance History Log</h1>
        <table>
          <thead>
            <tr>
              <th>Instance ID</th>
              <th>Name</th>
              <th>Status</th>
              <th>Last Status Change</th>
            </tr>
          </thead>
          <tbody id="instance-log-body">
          </tbody>
        </table>
      </body>
      </html>
    `;
}
  