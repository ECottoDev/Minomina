AWSTemplateFormatVersion: '2010-09-09'
Description: SamApp
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  Region:
    Type: String
    Default: us-east-2
  FromEmail:
    Type: String
    Default: support@cloudium.net
  BucketName:
    Type: String
    Default: status2.minominapr.com
Resources:
  MinominaQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 110
      QueueName: apiFunctionQueue
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - MinominaDLQ
          - Arn
        maxReceiveCount: 1
  MinominaDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: minomina-DLQ
  MinominaLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: minomina-layer
      Description: Common functions
      ContentUri: ../../layer
      CompatibleRuntimes:
      - nodejs20.x
      RetentionPolicy: Retain
  apiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: apiFunction
      CodeUri: apiFunction
      Layers:
      - Ref: MinominaLambdaLayer
      Handler: src/handlers/API.apiHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: Custom API for Minomina.
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: '*'
      - SQSPollerPolicy:
          QueueName: apiFunctionQueue
      Environment:
        Variables:
          REGION:
            Ref: Region
          GET_INSTANCES:
            Ref: updateInfoFunction
          INSTANCE_MANAGER:
            Ref: InstanceManagerFunction
          LOGIN:
            Ref: LoginFunction
          LOGOUT:
            Ref: LogoutFunction
          VERIFY:
            Ref: VerifySessionFunction
          SQS:
            Ref: MinominaQueue
          ENDPOINT_OVERRIDE: ''
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins:
          - '*'
          AllowMethods:
          - POST
          - PUT
          AllowHeaders:
          - '*'
          AllowCredentials: false
      Events:
        SQS:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - MinominaQueue
              - Arn
    Metadata:
      SamResourceId: apiFunction
  updateInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateInfoFunction
      CodeUri: updateInfoFunction
      Layers:
      - Ref: MinominaLambdaLayer
      Handler: src/handlers/UpdateInfo.handler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 1024
      Timeout: 100
      Description: Function that updates tables and returns current EC2 data to frontEnd
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: InstanceTable
      - SQSSendMessagePolicy:
          QueueName: RetryQueue
      - Statement:
        - Effect: Allow
          Action: sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - MinominaQueue
            - Arn
      - Statement:
        - Effect: Allow
          Action:
          - ec2:DescribeInstances
          Resource: '*'
      - Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: '*'
      - Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
      - Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          - s3:ListBucket
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: WebSiteBucket
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: WebSiteBucket
              - /*
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:DescribeTable
          Resource: '*'
      Environment:
        Variables:
          INSTANCE_TABLE:
            Ref: InstanceTable
          BUCKET:
            Ref: BucketName
          FROM:
            Ref: FromEmail
          REGION:
            Ref: Region
          SQS:
            Ref: MinominaQueue
          ENDPOINT_OVERRIDE: ''
    Metadata:
      SamResourceId: updateInfoFunction
  InstanceManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: InstanceManagerFunction
      CodeUri: InstanceManagerFunction
      Layers:
      - Ref: MinominaLambdaLayer
      Handler: src/handlers/InstanceManager.InstanceHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: Function that Executes Start/Stop/Reboot upon an instance.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: InstanceTable
      - Statement:
        - Effect: Allow
          Action: sqs:SendMessage
          Resource: arn:aws:sqs:us-east-2:992382533325:apiFunctionQueue
      - Statement:
        - Effect: Allow
          Action:
          - ec2:StartInstances
          - ec2:StopInstances
          - ec2:RebootInstances
          Resource: '*'
      - Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
      Environment:
        Variables:
          INSTANCE_TABLE:
            Ref: InstanceTable
          REGION:
            Ref: Region
          SQS:
            Ref: MinominaQueue
          FROM:
            Ref: FromEmail
          ENDPOINT_OVERRIDE: ''
    Metadata:
      SamResourceId: InstanceManagerFunction
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LoginFunction
      CodeUri: LoginFunction
      Handler: src/handlers/Login.loginHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: Function that Validates user and creates session for user.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SessionTable
      - Statement:
        - Effect: Allow
          Action: sqs:SendMessage
          Resource: arn:aws:sqs:us-east-2:992382533325:apiFunctionQueue
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserTable
          SESSION_TABLE:
            Ref: SessionTable
          REGION:
            Ref: Region
          SQS:
            Ref: MinominaQueue
          ENDPOINT_OVERRIDE: ''
    Metadata:
      SamResourceId: LoginFunction
  LogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LogoutFunction
      CodeUri: LogoutFunction
      Handler: src/handlers/Logout.logoutHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: Function that validates user session and deletes it.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SessionTable
      - Statement:
        - Effect: Allow
          Action: sqs:SendMessage
          Resource: arn:aws:sqs:us-east-2:992382533325:apiFunctionQueue
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          Resource: '*'
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserTable
          SESSION_TABLE:
            Ref: SessionTable
          REGION:
            Ref: Region
          SQS:
            Ref: MinominaQueue
          ENDPOINT_OVERRIDE: ''
    Metadata:
      SamResourceId: LogoutFunction
  VerifySessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: VerifySessionFunction
      CodeUri: VerifySessionFunction
      Handler: src/handlers/VerifySession.verifySessionHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 512
      Timeout: 100
      Description: Function to verify user and session life.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SessionTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserTable
      - Statement:
        - Effect: Allow
          Action: sqs:SendMessage
          Resource: arn:aws:sqs:us-east-2:992382533325:apiFunctionQueue
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          Resource: '*'
      Environment:
        Variables:
          USER_TABLE:
            Ref: UserTable
          SESSION_TABLE:
            Ref: SessionTable
          REGION:
            Ref: Region
          SQS:
            Ref: MinominaQueue
          ENDPOINT_OVERRIDE: ''
    Metadata:
      SamResourceId: VerifySessionFunction
  InstanceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: InstanceTable
      PrimaryKey:
        Name: InstanceId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: UsersTable
      PrimaryKey:
        Name: username
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  SessionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: SessionsTable
      PrimaryKey:
        Name: authToken
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  WebSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForWebSiteBucket
        Statement:
        - Sid: AllowPublicAccess
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: WebSiteBucket
              - /*
        - Sid: AllowPublicACLAccess
          Effect: Allow
          Principal: '*'
          Action: s3:PutObjectAcl
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: WebSiteBucket
              - /*
Outputs:
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value:
      Ref: WebSiteBucket
  S3WebsiteURL:
    Description: URL of the S3 bucket's static website
    Value:
      Fn::GetAtt:
      - WebSiteBucket
      - WebsiteURL
Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
